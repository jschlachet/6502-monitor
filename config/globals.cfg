.ifndef _GLOBALS_CFG_
_GLOBALS_CFG_ = 1


.define VERSION         "0.1.2e"

; ACIA hardware pointers
ACIA         = $4400
ACIA_DATA    = ACIA
ACIA_STATUS  = ACIA+1
ACIA_COMMAND = ACIA+2
ACIA_CONTROL = ACIA+3

; variables
ACIA_BUFFER   = $0200 ; 256 bytes, $200-$2FF
;
ACIA_RD_PTR   = $0300 ; 1 byte
ACIA_WR_PTR   = $0301 ; 1 byte
LED_STATUS    = $0302 ; 1 byte (really just bit 7)
INPUT_COMMAND = $0303 ; 16 bytes $0303-$0312
;             = $0313 ; 16 bytes $0313-$0322 (vacated since INPUT_ARGS moved)
TEMP_VALUE    = $0323 ; 1 byte (used for ascii to byte conversion)
ARG_VALUE     = $0324 ; 1 byte (value to be written to memory)
MODE          = $0325 ; 1 byte (mode of input for interrupt handler)
VIA_PORTB_LO  = $0326 ; 1 byte
VIA_PORTB_HI  = $0327 ; 1 byte
VIA_PORTA_LO  = $0338 ; 
VIA_PORTA_HI  = $0339 ; 
VIA_DDRB_LO   = $033a ; 1 byte
VIA_DDRB_HI   = $033b ; 1 byte
VIA_DDRA_LO   = $033c ; 1 byte
VIA_DDRA_HI   = $033d ; 1 byte
LCDPOS        = $033e ; 1 byte (position on lcd, assuming 16x2)
;             = $033f ; through $03ff (padding ahead of INPUT_ARGS)
INPUT_ARGS    = $0400 ; needs to aligned because indirect addressing only operates on lower half 

; constants
NULL    = $00
EQUAL   = $00
LT      = $ff
GT      = $01

; the global MODE affects interrupt driven serial input. the values are below
MODE_NONE           = $00   ; normal mode
MODE_XMODEM_RECEIVE = $01   ; fall through; xmodem does its own serial input
MODE_USERINPUT      = $02   ; change behavior of enter key, instead of execute it signals end of input.
MODE_USERINPUT_DONE = $03   ; flag so user input function can detect when input is complete, it must reset MODE

INPUT_ARGS_LENGTH = $0f          ; length of INPUT_ARGS 

RUN_ADDR      = $3000

.endif
